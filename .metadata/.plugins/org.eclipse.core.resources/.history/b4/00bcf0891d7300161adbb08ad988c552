package day_2;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.StringTokenizer;

public class LargestWeightedSubsequence {
	public static final String PATH_FILE = "D:\\input_sequence.txt";
	public static int[] inputData;

	public static void main(String[] args) {
		long beginTime = System.currentTimeMillis();
		readInput();
		System.out.println(directAlgo(inputData));
		long endTime = System.currentTimeMillis();
		System.out.println(endTime - beginTime + "ms");
	}

	public static void readInput() {
		try {
			System.setIn(new FileInputStream(PATH_FILE));
			Scanner inp = new Scanner(System.in);
			int numberOfInteger = Integer.parseInt(inp.nextLine());
			inputData = new int[numberOfInteger];
			String line = inp.nextLine();
			StringTokenizer tokenizer = new StringTokenizer(line, ", ");

			int i = -1;
			while (tokenizer.hasMoreTokens()) {
				i++;
				inputData[i] = Integer.parseInt(tokenizer.nextToken());
			}
			inp.close();
		} catch (FileNotFoundException e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}
	}

	/**
	 * Scan all possible subsequences
			Compute and keep the largest weight subsequence*/
	public static long directAlgo(int[] a) {
		int n = a.length;
		long max = a[0];
		for (int i = 0; i < n; i++) {
			for (int j = i; j < n; j++) {
				int sum = 0;
				for (int k = i; k <= j; k++)
					sum = sum + a[k];
				max = max < sum ? sum : max;
			}
		}
		return max;
	}
	
	public static long 
}
